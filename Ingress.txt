

Ingress
 - https
 - Global IP (Anycast)
 - Can Enable CDN
 - Gzip with Nginx

 Internet
=> gce-ingress l7
=> nginx-ingress (NodePort)
=> backend-service (ClusterIP)

1. สร้าง ConfigMap เพื่อ config nginx

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress
  labels:
    app: nginx-ingress
data:
  body-size: 5m
  enable-vts-status: "true"
  hsts: "false" # ถ้าจะใช้ HTTPS อยู่แล้วก็ควรใช้ HSTS
  server-tokens: "false"
  use-gzip: "true"

2.สร้าง Service สำหรับ nginx
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress
  labels:
    app: nginx-ingress
spec:
  type: NodePort
  selector:
    app: nginx-ingress
  ports:
  - name: http
    port: 80

3. สร้าง Deployment ของ nginx-ingress-controller

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: nginx-ingress
  labels:
    app: nginx-ingress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-ingress
  template:
    metadata:
      labels:
        app: nginx-ingress
    spec:
      containers:
      - name: nginx-ingress-controller
        image: gcr.io/google-containers/nginx-ingress-controller:0.9.0-beta.15
        ports:
        - containerPort: 80
        args:
        - /nginx-ingress-controller
        - --default-backend-service=kube-system/default-http-backend
        - --configmap=$(POD_NAMESPACE)/nginx-ingress
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 80
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1

4. สร้าง ingress ให้ nginx

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx # ห้ามลืมบรรทัดนี้!!!
    kubernetes.io/tls-acme: "true" # ถ้าใช้ kube-lego ให้ไว้ใน nginx
    ingress.kubernetes.io/limit-rps: "10" # ใส่ rate-limit ด้วยก็ดี
  name: nginx-ingress
spec:
  rules:
  # เพิ่ม backend services ที่นี่ได้เลย
  - host: example.com
    http:
      paths:
      - backend:
          serviceName: example
          servicePort: 8080
  tls:
  - secretName: gce-ingress # ค่านี้ให้จำไว้ เพราะจะเอาไปใช้ใน gce-ingress
    # ใส่ tls certificate ที่นี้,​ kube-lego ก็ใส่ที่นี่
    hosts:
    - example.com

5. สร้าง ingress ให้ gce

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: gce # ห้ามลืมบรรทัดนี้!!!
  name: gce-ingress
spec:
  backend: # ส่งทุก requests เข้าไปที่ nginx
    serviceName: nginx-ingress
    servicePort: 80
  tls:
  - secretName: gce-ingress # ตั้งชื่อเดียวกันกับ secretName ใน nginx




https://github.com/acoshift/k8s-app/tree/master/gce-nginx-ingress